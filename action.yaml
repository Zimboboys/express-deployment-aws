name: 'Express Deployment AWS'
description: 'Automatically deploy an Express app to API Gateway/Lambda'

inputs:
  s3-bucket:
    description: 's3 bucket to store builds'
    required: true

  # Region may be removable. Provided by aws-actions/configure-aws-credentials@v1?
  region:
    description: 'Region to deploy to'
    required: true
    default: 'us-east-1'
  stack-name:
    description: 'Cloud Formation stack name'
    required: true
  domain:
    description: 'Domain to deploy to'
    required: false
    default: ''

outputs:
  api-url:
    description: 'URL of the API'
    value: ${{ steps.get-url.outputs.api-url }}

runs:
  using: "composite"
  steps:
    - name: Install backend dependencies
      working-directory: backend
      run: npm install --production
      shell: bash

    - name: Declare env variables
      run: |
        echo ${{ toJSON(env) }} > ./trash/to_json.env
        # echo ${{ env }} | ${{ github.action_path }}/generate_env.sh > ./backend/.env
        aws s3 sync ./trash s3://${{ inputs.s3-bucket }} --region ${{ inputs.region }}
      shell: bash

    - name: Compile backend
      run: |
        cp ${{ github.action_path }}/lambda.js .
        cp ${{ github.action_path }}/webpack.config.js .
        npm install webpack webpack-cli source-map-support dotenv-webpack @vendia/serverless-express
        npx webpack-cli
      shell: bash

    - name: Create bucket
      run: (aws s3api get-bucket-location --bucket ${{ inputs.s3-bucket }} || aws s3 mb s3://${{ inputs.s3-bucket }})
      shell: bash

    - name: Package backend
      run: |
        cp ${{ github.action_path }}/sam-template.yaml .
        aws cloudformation package --template ./sam-template.yaml --s3-bucket ${{ inputs.s3-bucket }} --output-template sam-template.packaged.yaml --region ${{ inputs.region }}
      shell: bash

    - name: Deploy backend
      run: aws cloudformation deploy --template-file sam-template.packaged.yaml --stack-name ${{ inputs.stack-name }} --capabilities CAPABILITY_IAM --region ${{ inputs.region }} --parameter-overrides DomainName=${{ inputs.domain }}
      shell: bash

    - id: get-url
      run: |
        url=$(aws cloudformation --region ${{ inputs.region }} describe-stacks --stack-name ${{ inputs.stack-name }} --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" --output text)
        echo "::set-output name=api-url::$(echo $url)"
      shell: bash
